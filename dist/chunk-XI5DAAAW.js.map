{"version":3,"sources":["../src/components/Button/Button.tsx"],"names":["React","forwardRef","styled","useTheme","tinycolor","IconWrapper","Box_default","fill","Button","props","ref","children","colorScheme","iconSpacing","isDisabled","isLoading","leftIcon","rightIcon","showArrowIcon","textColor","variant","rest","theme","color","newTextColor","wrapperWithIconStyle","renderRightIcon","wrapperProps","ArrowRight_default","Spinner_default","Button_default"],"mappings":"wHAAA,OAAOA,GAAS,cAAAC,MAAkB,QAClC,OAAOC,MAAY,kBACnB,OAAS,YAAAC,MAAgB,iBACzB,OAAOC,MAAe,aAOtB,IAAMC,EAAcH,EAAOI,CAAG;AAAA;AAAA,YAElB,CAAC,CAAE,KAAAC,CAAK,IAAMA;AAAA;AAAA,EAgBpBC,EAASP,EAA2C,CAACQ,EAAOC,IAAQ,CACxE,GAAM,CACJ,SAAAC,EACA,YAAAC,EAAc,UACd,YAAAC,EAAc,EACd,WAAAC,EACA,UAAAC,EACA,SAAAC,EACA,UAAAC,EACA,cAAAC,EACA,UAAAC,EACA,QAAAC,EAAU,WACPC,CACL,EAAIZ,EAEEa,EAAQnB,EAAS,EACjBoB,EAAQD,EAAM,OAAOV,IAAgBA,EACrCY,EACJL,GAAaC,IAAY,QACrBG,EACAnB,EAAUmB,CAAK,EAAE,QAAQ,EACzBD,EAAM,OAAO,QACbA,EAAM,OAAO,MAEbG,EACJT,GAAYC,GAAaC,GAAiBH,EACtC,CACE,WAAY,SACZ,eAAgBA,EAAY,SAAW,eACzC,EACA,CAAC,EAEDW,EAAkB,IAAM,CAC5B,IAAMC,EAAe,CACnB,KAAMH,EACN,GAAIX,CACN,EAEA,OAAIE,EAAkB,KAElBE,EACKjB,EAAA,cAACK,EAAA,CAAa,GAAGsB,GAAeV,CAAU,EACxCC,EAEPlB,EAAA,cAACK,EAAA,CAAa,GAAGsB,GACf3B,EAAA,cAAC4B,EAAA,IAAW,CACd,EAGG,IACT,EAEA,OACE5B,EAAA,cAACM,EAAA,CACC,IAAKI,EACL,GAAG,SACH,GAAG,UACH,YAAaE,EACb,SAAU,QAAQE,GAAcC,CAAS,EACxC,GAAGN,EACJ,MAAO,CACL,WAAY,OACZ,GAAIc,EACJ,OAAQ,EACR,aAAc,OACd,MAAOC,EACP,QAAS,cACT,SAAU,KACV,SAAU,WACV,GAAI,EACJ,GAAI,EACJ,UAAW,SACX,eAAgB,OAChB,WAAY,YACZ,WAAY,OACZ,MAAOf,EAAM,YAAc,OAAS,MACtC,EACA,QAASW,EACR,GAAGK,EACH,GAAGJ,GAEHL,GAAY,CAACD,GACZf,EAAA,cAACK,EAAA,CAAY,KAAMmB,EAAc,GAAIX,GAClCG,CACH,EAEDD,EACCf,EAAA,cAAC6B,EAAA,CAAQ,KAAM,SAAU,MAAOL,EAAc,UAAU,MAAM,EAE9Db,EAEDe,EAAgB,CACnB,CAEJ,CAAC,EAEMI,EAAQtB","sourcesContent":["import React, { forwardRef } from 'react';\nimport styled from '@emotion/styled';\nimport { useTheme } from '@emotion/react';\nimport tinycolor from 'tinycolor2';\nimport { ArrowRight } from 'src/components/Icons';\nimport { Box, BoxProps } from 'src/components/Box';\nimport { Spinner } from 'src/components/Spinner';\nimport { IThemeFoundationSpace } from 'src/theme/theme';\nimport { Children } from 'src/lib';\n\nconst IconWrapper = styled(Box)<{ fill?: string }>`\n  svg {\n    fill: ${({ fill }) => fill};\n  }\n`;\n\nexport interface ButtonProps extends BoxProps {\n  colorScheme?: keyof IThemeFoundationSpace;\n  iconSpacing?: number;\n  isDisabled?: boolean;\n  isFullWidth?: boolean;\n  isLoading?: boolean;\n  leftIcon?: Children;\n  rightIcon?: Children;\n  showArrowIcon?: boolean;\n  textColor?: keyof IThemeFoundationSpace;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\n  const {\n    children,\n    colorScheme = 'primary',\n    iconSpacing = 4,\n    isDisabled,\n    isLoading,\n    leftIcon,\n    rightIcon,\n    showArrowIcon,\n    textColor,\n    variant = 'solid',\n    ...rest\n  } = props;\n\n  const theme = useTheme();\n  const color = theme.colors[colorScheme] || colorScheme;\n  const newTextColor =\n    textColor || variant !== 'solid'\n      ? color\n      : tinycolor(color).isLight()\n      ? theme.colors.primary\n      : theme.colors.white;\n\n  const wrapperWithIconStyle =\n    leftIcon || rightIcon || showArrowIcon || isLoading\n      ? {\n          alignItems: 'center',\n          justifyContent: isLoading ? 'center' : 'space-between',\n        }\n      : {};\n\n  const renderRightIcon = () => {\n    const wrapperProps = {\n      fill: newTextColor,\n      ml: iconSpacing,\n    };\n\n    if (isLoading) return null;\n\n    if (rightIcon) {\n      return <IconWrapper {...wrapperProps}>{rightIcon}</IconWrapper>;\n    } else if (showArrowIcon) {\n      return (\n        <IconWrapper {...wrapperProps}>\n          <ArrowRight />\n        </IconWrapper>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box\n      ref={ref}\n      as=\"button\"\n      tx=\"buttons\"\n      colorScheme={colorScheme}\n      disabled={Boolean(isDisabled || isLoading)}\n      {...props}\n      __css={{\n        appearance: 'none',\n        bg: color,\n        border: 0,\n        borderRadius: 'base',\n        color: newTextColor,\n        display: 'inline-flex',\n        fontSize: 'sm',\n        position: 'relative',\n        px: 6,\n        py: 4,\n        textAlign: 'center',\n        textDecoration: 'none',\n        transition: 'all 250ms',\n        userSelect: 'none',\n        width: props.isFullWidth ? '100%' : 'auto',\n      }}\n      variant={variant}\n      {...wrapperWithIconStyle}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <IconWrapper fill={newTextColor} mr={iconSpacing}>\n          {leftIcon}\n        </IconWrapper>\n      )}\n      {isLoading ? (\n        <Spinner size={'1.5rem'} color={newTextColor} thickness=\"1px\" />\n      ) : (\n        children\n      )}\n      {renderRightIcon()}\n    </Box>\n  );\n});\n\nexport default Button;\n"]}