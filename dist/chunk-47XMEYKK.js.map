{"version":3,"sources":["../src/lib/utils.ts"],"names":["assignRef","ref","value","mergeRefs","refs","node"],"mappings":"AAaO,SAASA,EACdC,EACAC,EACA,CACI,OAAOD,GAAQ,WACjBA,EAAIC,CAAK,EACA,OAAOD,GAAQ,UAAYA,IAAQ,MAAQ,YAAaA,IAEjEA,EAAI,QAAUC,EAElB,CAEO,SAASC,KAAsBC,EAAgB,CACpD,OAAQC,GAAmB,CACzBD,EAAK,QAASH,GAAQD,EAAUC,EAAKI,CAAI,CAAC,CAC5C,CACF","sourcesContent":["// source: https://github.com/mantinedev/mantine/blob/master/src/mantine-hooks/src/use-merged-ref/use-merged-ref.ts\n\nimport React from 'react';\n\ntype Ref<T> = React.Dispatch<React.SetStateAction<T>> | React.ForwardedRef<T>;\n\nexport type Children =\n  | string\n  | number\n  | React.ReactElement<any, string | React.JSXElementConstructor<any>>\n  | React.ReactFragment\n  | React.ReactPortal;\n\nexport function assignRef<T = any>(\n  ref: React.ForwardedRef<T>,\n  value: T | null,\n) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (typeof ref === 'object' && ref !== null && 'current' in ref) {\n    // eslint-disable-next-line no-param-reassign\n    ref.current = value;\n  }\n}\n\nexport function mergeRefs<T = any>(...refs: Ref<T>[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => assignRef(ref, node));\n  };\n}\n"]}