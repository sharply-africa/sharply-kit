{"version":3,"sources":["../src/components/Stack/Stack.tsx"],"names":["React","forwardRef","StackItem","props","Box_default","Stack","ref","isInline","directionProp","align","justify","spacing","wrap","children","divider","className","shouldWrapChildren","rest","direction","styles","getStackStyles","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","validChildren","getValidChildren","clones","child","index","isLast","_child","clonedDivider","_divider","selector","Stack_default"],"mappings":"qGAIA,OAAOA,GAAS,cAAAC,MAAkB,QAyB3B,IAAMC,EAAaC,GACxBH,EAAA,cAACI,EAAA,CACE,GAAGD,EACJ,MAAO,CACL,QAAS,eACT,KAAM,WACN,SAAU,EACV,GAAGA,EAAM,KACX,EACF,EAGIE,EAAQJ,EAAW,CAACE,EAAmBG,IAAQ,CACnD,GAAM,CACJ,SAAAC,EACA,UAAWC,EACX,MAAAC,EACA,QAAAC,EACA,QAAAC,EAAU,SACV,KAAAC,EACA,SAAAC,EACA,QAAAC,EACA,UAAAC,EACA,mBAAAC,KACGC,CACL,EAAId,EAEEe,EAAYX,EAAW,MAAQC,GAAiB,SAEhDW,EAASnB,EAAM,QACnB,IAAMoB,EAAe,CAAE,UAAAF,EAAW,QAAAP,CAAQ,CAAC,EAC3C,CAACO,EAAWP,CAAO,CACrB,EAEMU,EAAerB,EAAM,QACzB,IAAMsB,EAAiB,CAAE,QAAAX,EAAS,UAAAO,CAAU,CAAC,EAC7C,CAACP,EAASO,CAAS,CACrB,EAEMK,EAAa,CAAC,CAACT,EACfU,EAAoB,CAACR,GAAsB,CAACO,EAE5CE,EAAgBC,EAAiBb,CAAQ,EAEzCc,EAASH,EACXC,EACAA,EAAc,IAAI,CAACG,EAAOC,IAAU,CAClC,IAAMC,EAASD,EAAQ,IAAMJ,EAAc,OAErCM,EAASf,EADMhB,EAAA,cAACE,EAAA,CAAU,IAAK2B,GAAQD,CAAM,EACAA,EAEnD,GAAI,CAACL,EAAY,OAAOQ,EAExB,IAAMC,EAAgBhC,EAAM,aAAac,EAAS,CAChD,MAAOO,CACT,CAAC,EAEKY,EAAWH,EAAS,KAAOE,EAEjC,OACEhC,EAAA,cAACA,EAAM,SAAN,CAAe,IAAK6B,GAClBE,EACAE,CACH,CAEJ,CAAC,EAEL,OACEjC,EAAA,cAACI,EAAA,CACC,IAAKE,EACL,QAAQ,OACR,WAAYG,EACZ,eAAgBC,EAChB,cAAeS,EAAO,cACtB,SAAUP,EACV,UAAWG,EACX,MAAOQ,EAAa,CAAC,EAAI,CAAE,CAACW,GAAWf,EAAOe,EAAU,EACvD,GAAGjB,GAEHU,CACH,CAEJ,CAAC,EAEMQ,EAAQ9B","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n// component source (Chakra UI): https://github.com/chakra-ui/chakra-ui/blob/main/packages/layout/src/stack.tsx\n\nimport { SystemCssProperties } from '@styled-system/css';\nimport React, { forwardRef } from 'react';\nimport { ResponsiveValue } from 'styled-system';\nimport { Box, BoxProps } from 'src/components/Box';\nimport {\n  getDividerStyles,\n  getStackStyles,\n  getValidChildren,\n  selector,\n} from './utils';\n\ntype StackDirection = ResponsiveValue<\n  'row' | 'column' | 'row-reverse' | 'column-reverse'\n>;\n\ninterface StackProps extends BoxProps {\n  align?: SystemCssProperties['alignItems'] | any;\n  direction?: StackDirection;\n  divider?: React.ReactElement;\n  isInline?: boolean;\n  justify?: SystemCssProperties['justifyContent'] | any;\n  shouldWrapChildren?: boolean;\n  spacing?: SystemCssProperties['margin'];\n  wrap?: SystemCssProperties['flexWrap'] | any;\n}\n\nexport const StackItem = (props: BoxProps) => (\n  <Box\n    {...props}\n    __css={{\n      display: 'inline-block',\n      flex: '0 0 auto',\n      minWidth: 0,\n      ...props.__css,\n    }}\n  />\n);\n\nconst Stack = forwardRef((props: StackProps, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = '0.5rem',\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props;\n\n  const direction = isInline ? 'row' : directionProp ?? 'column';\n\n  const styles = React.useMemo(\n    () => getStackStyles({ direction, spacing }),\n    [direction, spacing],\n  );\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  );\n\n  const hasDivider = !!divider;\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider;\n\n  const validChildren = getValidChildren(children);\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const isLast = index + 1 === validChildren.length;\n        const wrappedChild = <StackItem key={index}>{child}</StackItem>;\n        const _child = shouldWrapChildren ? wrappedChild : child;\n\n        if (!hasDivider) return _child;\n\n        const clonedDivider = React.cloneElement(divider, {\n          __css: dividerStyle,\n        });\n\n        const _divider = isLast ? null : clonedDivider;\n\n        return (\n          <React.Fragment key={index}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        );\n      });\n\n  return (\n    <Box\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </Box>\n  );\n});\n\nexport default Stack;\n"]}