{"version":3,"sources":["../src/components/Input/Input.tsx"],"names":["React","forwardRef","PhoneInput","usePlacesWidget","usePlacesService","InputComponent","props","ref","Box_default","AUTOCOMPLETE_FIELDS","Input","onChange","type","value","placesOptions","hasSetDefaultValue","googleMapsKey","useTheme_default","placesRef","location","_a","placePredictions","getPlacePredictions","placesService","isPlacePredictionsLoading","place_id","place","PhoneInputWrapper","mergeRefs","evt","Input_default"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-nocheck\n\nimport React, { forwardRef } from 'react';\nimport PhoneInput from 'react-phone-input-2';\nimport { usePlacesWidget } from 'react-google-autocomplete';\nimport usePlacesService from 'react-google-autocomplete/lib/usePlacesAutocompleteService';\nimport { Box, BoxProps } from 'src/components/Box';\nimport useTheme from 'src/hooks/useTheme';\nimport { PhoneInputWrapper } from './StyledComponents';\nimport { mergeRefs } from 'src/lib';\n\ninterface InputProps extends React.HTMLProps<HTMLInputElement>, BoxProps {\n  placesOptions?: Record<string, any>;\n}\n\ntype InputRef =\n  | string\n  | ((instance: HTMLInputElement) => void)\n  | React.MutableRefObject<HTMLInputElement>;\n\nconst InputComponent = forwardRef<HTMLInputElement, InputProps>(\n  (props, ref) => (\n    <Box\n      as=\"input\"\n      ref={ref}\n      tx=\"form\"\n      {...props}\n      __css={{\n        appearance: 'none',\n        backgroundColor: 'white',\n        border: '1px solid',\n        borderColor: '#E7ECE8',\n        borderRadius: 'base',\n        color: 'heading',\n        fontFamily: 'body',\n        fontSize: ['sm'],\n        fontWeight: 'normal',\n        lineHeight: 'default',\n        outline: 'none',\n        px: 4,\n        py: 3,\n        width: '100%',\n        '&:disabled': {\n          backgroundColor: '#E7ECE8',\n          opacity: 0.5,\n        },\n        '&:readonly': {\n          backgroundColor: '#E7ECE8',\n          opacity: 0.5,\n        },\n        '&:focus': {\n          borderColor: 'primary',\n        },\n        '&:placholder': {\n          color: '#C4C4C4',\n        },\n      }}\n    />\n  ),\n);\n\nconst AUTOCOMPLETE_FIELDS = ['geometry.location', 'formatted_address'];\n\nexport const Input = forwardRef<InputRef, InputProps>(\n  ({ onChange, type, value, placesOptions, ...props }, ref) => {\n    const hasSetDefaultValue = React.useRef(false);\n    const { googleMapsKey } = useTheme();\n\n    const { ref: placesRef } = usePlacesWidget({\n      apiKey: googleMapsKey,\n      onPlaceSelected: (location) => {\n        if (placesRef?.current?.value) {\n          placesRef.current.value = location?.formatted_address || '';\n        }\n        onChange?.(location);\n      },\n      options: {\n        types: ['geocode', 'establishment'],\n        fields: AUTOCOMPLETE_FIELDS,\n        ...placesOptions,\n      },\n    });\n\n    const {\n      placePredictions,\n      getPlacePredictions,\n      placesService,\n      isPlacePredictionsLoading,\n    } = usePlacesService({\n      apiKey: googleMapsKey,\n      options: {\n        types: ['address'],\n        componentRestrictions: { country: 'ng' },\n      },\n    });\n\n    React.useEffect(() => {\n      if (\n        props.defaultValue &&\n        type === 'address' &&\n        !hasSetDefaultValue.current\n      ) {\n        placesRef.current.value = props.defaultValue;\n        getPlacePredictions({ input: props.defaultValue });\n        hasSetDefaultValue.current = true;\n      }\n    }, [getPlacePredictions, placesRef, props.defaultValue, type]);\n\n    React.useEffect(() => {\n      if (!isPlacePredictionsLoading && placePredictions.length) {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        const { place_id } = placePredictions[0];\n\n        placesService?.getDetails(\n          { placeId: place_id, fields: AUTOCOMPLETE_FIELDS },\n          (place) => {\n            onChange(place);\n            hasSetDefaultValue.current = false;\n          },\n        );\n      }\n    }, [isPlacePredictionsLoading, placePredictions, placesService, onChange]);\n\n    React.useEffect(() => {\n      if (!value && placesRef?.current) {\n        placesRef.current.value = '';\n      }\n    }, [placesRef, value]);\n\n    if (type === 'phone') {\n      return (\n        <PhoneInputWrapper ref={ref}>\n          <PhoneInput\n            autoFormat\n            country=\"ng\"\n            inputProps={{ ...props }}\n            onChange={onChange}\n            value={value}\n            {...props}\n          />\n        </PhoneInputWrapper>\n      );\n    }\n\n    if (type === 'address') {\n      return (\n        <InputComponent\n          ref={mergeRefs(ref, placesRef)}\n          autoComplete=\"off\"\n          type={type}\n          {...props}\n          onBlur={(evt) => {\n            props.onBlur?.(evt);\n            if (!evt.target.value) {\n              onChange(null);\n            }\n          }}\n        />\n      );\n    }\n\n    return (\n      <InputComponent\n        onChange={onChange}\n        ref={ref}\n        type={type}\n        value={value as string}\n        {...props}\n      />\n    );\n  },\n);\n\nexport default Input;\n"]}