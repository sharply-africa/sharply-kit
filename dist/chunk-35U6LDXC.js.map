{"version":3,"sources":["../src/components/Switch/Switch.tsx"],"names":["React","useEffect","useRef","useState","forwardRef","Switch","props","ref","active","activeBackgroundColor","inactiveBackgroundColor","isLoading","onChange","subtitle","subtitleProps","sx","title","titleProps","trackGap","trackHeight","trackWidth","thumbWidth","setThumbWidth","trackClientWidth","setTrackWidth","trackRef","_a","_b","_c","Stack_default","Spinner_default","Box_default","Text_default","Switch_default"],"mappings":"gKAAA,OAAOA,GAAS,aAAAC,EAAW,UAAAC,EAAQ,YAAAC,EAAU,cAAAC,MAAkB,QAuB/D,IAAMC,EAASD,EAAW,CAACE,EAAoBC,IAAQ,CACrD,GAAM,CACJ,OAAAC,EACA,sBAAAC,EAAwB,UACxB,wBAAAC,EAA0B,UAC1B,UAAAC,EAAY,GACZ,SAAAC,EAAW,IAAM,CAAC,EAClB,SAAAC,EACA,cAAAC,EAAgB,CAAC,EACjB,GAAAC,EAAK,CAAC,EACN,MAAAC,EACA,WAAAC,EAAa,CAAC,EACd,SAAAC,EAAW,EACX,YAAAC,EAAc,SACd,WAAAC,EAAa,QACf,EAAId,EAEE,CAACe,EAAYC,CAAa,EAAInB,EAAS,CAAC,EACxC,CAACoB,EAAkBC,CAAa,EAAIrB,EAAS,CAAC,EAC9CsB,EAAWvB,EAA8B,IAAI,EAEnD,OAAAD,EAAU,IAAM,CA5ClB,IAAAyB,EAAAC,EAAAC,GA6CQF,EAAAD,EAAS,UAAT,MAAAC,EAAkB,cACpBJ,IAAcK,EAAAF,GAAA,YAAAA,EAAU,UAAV,YAAAE,EAAmB,cAAeT,EAAW,CAAC,EAC5DM,GAAcI,EAAAH,GAAA,YAAAA,EAAU,UAAV,YAAAG,EAAmB,WAAW,EAEhD,EAAG,CAACV,CAAQ,CAAC,EAGXlB,EAAA,cAAC6B,EAAA,CACC,UAAU,MACV,QAAS,IAAMjB,EAAS,CAACJ,CAAM,EAC/B,IAAKD,EACL,QAAS,EACT,GAAI,CACF,cAAeI,EAAY,OAAS,OACpC,GAAKE,EAAsC,CAAC,EAA5B,CAAE,WAAY,QAAS,EACvC,GAAGE,CACL,EACC,GAAGT,GAEHK,EACCX,EAAA,cAAC8B,EAAA,CAAQ,KAAK,SAAS,EAEvB9B,EAAA,cAAC+B,EAAA,CACC,IAAKN,EACL,MAAO,CACL,gBAAiBjB,EACbC,EACAC,EACJ,aAAc,OACd,OAAQ,UACR,QAAS,OACT,SAAU,WACV,OAAQS,EACR,MAAOC,EACP,GAAI,GAAGF,MACP,GAAI,GAAGA,KACT,GAEAlB,EAAA,cAAC+B,EAAA,CACC,MAAO,CACL,gBAAiB,QACjB,aAAc,MACd,OAAQV,EACR,KAAOb,EAEH,GAAGe,EAAmBL,EAAWG,MADjC,GAAGH,MAEP,SAAU,WACV,IAAK,MACL,UAAW,mBACX,WAAY,WACZ,MAAOG,CACT,EACF,CACF,EAGFrB,EAAA,cAAC6B,EAAA,CAAM,QAAS,GACbb,EACChB,EAAA,cAACgC,EAAA,CAAK,SAAS,KAAK,MAAM,UAAW,GAAGf,GACrCD,CACH,EACE,KAEHH,EACCb,EAAA,cAACgC,EAAA,CAAK,SAAS,MAAM,MAAM,OAAQ,GAAGlB,GACnCD,CACH,EACE,IACN,CACF,CAEJ,CAAC,EAEMoB,EAAQ5B","sourcesContent":["import React, { useEffect, useRef, useState, forwardRef } from 'react';\nimport { Box, BoxProps } from 'src/components/Box';\nimport { Spinner } from 'src/components/Spinner';\nimport { Stack } from 'src/components/Stack';\nimport { Text, TextProps } from 'src/components/Text';\nimport { IThemeFoundationColors } from 'src/theme/theme';\n\ninterface SwitchProps extends BoxProps {\n  active?: boolean;\n  activeBackgroundColor?: keyof IThemeFoundationColors;\n  inactiveBackgroundColor?: keyof IThemeFoundationColors;\n  isLoading?: boolean;\n  onChange?: (v: boolean) => void;\n  subtitle?: string;\n  subtitleProps?: TextProps;\n  sx?: BoxProps['sx'];\n  title?: string;\n  titleProps?: TextProps;\n  trackGap?: number;\n  trackHeight?: string;\n  trackWidth?: string;\n}\n\nconst Switch = forwardRef((props: SwitchProps, ref) => {\n  const {\n    active,\n    activeBackgroundColor = '#6041E0',\n    inactiveBackgroundColor = '#C4C4C4',\n    isLoading = false,\n    onChange = () => {},\n    subtitle,\n    subtitleProps = {},\n    sx = {},\n    title,\n    titleProps = {},\n    trackGap = 3,\n    trackHeight = '1.4rem',\n    trackWidth = '2.6rem',\n  } = props;\n\n  const [thumbWidth, setThumbWidth] = useState(0);\n  const [trackClientWidth, setTrackWidth] = useState(0);\n  const trackRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    if (trackRef.current?.clientWidth) {\n      setThumbWidth(trackRef?.current?.clientHeight - trackGap * 2);\n      setTrackWidth(trackRef?.current?.clientWidth);\n    }\n  }, [trackGap]);\n\n  return (\n    <Stack\n      direction=\"row\"\n      onClick={() => onChange(!active)}\n      ref={ref}\n      spacing={2}\n      sx={{\n        pointerEvents: isLoading ? 'none' : 'auto',\n        ...(!subtitle ? { alignItems: 'center' } : {}),\n        ...sx,\n      }}\n      {...props}\n    >\n      {isLoading ? (\n        <Spinner size=\"1.6rem\" />\n      ) : (\n        <Box\n          ref={trackRef}\n          __css={{\n            backgroundColor: active\n              ? activeBackgroundColor\n              : inactiveBackgroundColor,\n            borderRadius: 'full',\n            cursor: 'pointer',\n            display: 'flex',\n            position: 'relative',\n            height: trackHeight,\n            width: trackWidth,\n            px: `${trackGap}px`,\n            py: `${trackGap}px`,\n          }}\n        >\n          <Box\n            __css={{\n              backgroundColor: 'white',\n              borderRadius: '50%',\n              height: thumbWidth,\n              left: !active\n                ? `${trackGap}px`\n                : `${trackClientWidth - trackGap - thumbWidth}px`,\n              position: 'absolute',\n              top: '50%',\n              transform: 'translateY(-50%)',\n              transition: 'all 0.2s',\n              width: thumbWidth,\n            }}\n          />\n        </Box>\n      )}\n\n      <Stack spacing={1}>\n        {title ? (\n          <Text fontSize=\"xs\" color=\"heading\" {...titleProps}>\n            {title}\n          </Text>\n        ) : null}\n\n        {subtitle ? (\n          <Text fontSize=\"xxs\" color=\"text\" {...subtitleProps}>\n            {subtitle}\n          </Text>\n        ) : null}\n      </Stack>\n    </Stack>\n  );\n});\n\nexport default Switch;\n"]}