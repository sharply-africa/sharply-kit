{"version":3,"sources":["../src/components/Accordion/Accordion.tsx"],"names":["React","forwardRef","useCallback","useEffect","useMemo","useRef","useState","AccordionComponent","children","initialOpen","onChange","rest","ref","isOpen","setIsOpen","contentHeight","setContentHeight","contentRef","toggleOpen","v","getContentHeight","_a","value","Box_default","AccordionContext","Accordion","AccordionHeader_default","AccordionContent_default","Accordion_default"],"mappings":"gKAAA,OAAOA,GACL,cAAAC,EACA,eAAAC,EACA,aAAAC,EACA,WAAAC,EACA,UAAAC,EACA,YAAAC,MACK,QAWP,IAAMC,EAAqBN,EACzB,CACE,CACE,SAAAO,EACA,YAAAC,EAAc,GACd,SAAAC,EAAW,IAAM,CAAC,KACfC,CACL,EACAC,IACG,CACH,GAAM,CAACC,EAAQC,CAAS,EAAIR,EAASG,CAAW,EAC1C,CAACM,EAAeC,CAAgB,EAAIV,EAAS,CAAC,EAC9CW,EAAaZ,EAA8B,IAAI,EAE/Ca,EAAahB,EAAY,IAAMY,EAAWK,GAAM,CAACA,CAAC,EAAG,CAAC,CAAC,EAEvDC,EAAmB,IAAM,CAlCnC,IAAAC,EAmCM,OAAOA,EAAAJ,GAAA,YAAAA,EAAY,UAAZ,YAAAI,EAAqB,YAC9B,EAEAlB,EAAU,IAAM,CACda,EAAiBH,EAASO,EAAiB,EAAI,CAAC,EAChDV,EAASG,CAAM,CACjB,EAAG,CAACA,EAAQH,CAAQ,CAAC,EAErB,IAAMY,EAAQlB,EACZ,KAAO,CACL,cAAAW,EACA,WAAAE,EACA,OAAAJ,EACA,WAAAK,CACF,GACA,CAACH,EAAeF,EAAQK,CAAU,CACpC,EAEA,OACElB,EAAA,cAACuB,EAAA,CACC,IAAKX,EACJ,GAAGD,EACJ,MAAO,CACL,GAAKE,EAAkC,CAAC,EAA1B,CAAE,SAAU,QAAS,EACnC,GAAI,QACJ,aAAc,KACd,WAAY,MACd,GAEAb,EAAA,cAACwB,EAAiB,SAAjB,CAA0B,MAAOF,GAC/Bd,CACH,CACF,CAEJ,CACF,EAEMiB,EAAY,OAAO,OAAOlB,EAAoB,CAClD,OAAQmB,EACR,QAASC,CACX,CAAC,EAEMC,EAAQH","sourcesContent":["import React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Box, BoxProps } from 'src/components/Box';\nimport { AccordionContext } from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionContent from './AccordionContent';\n\ninterface AccordionProps extends BoxProps {\n  initialOpen?: boolean;\n  onChange?: (v: any) => void;\n}\n\nconst AccordionComponent = forwardRef(\n  (\n    {\n      children,\n      initialOpen = false,\n      onChange = () => {},\n      ...rest\n    }: AccordionProps,\n    ref,\n  ) => {\n    const [isOpen, setIsOpen] = useState(initialOpen);\n    const [contentHeight, setContentHeight] = useState(0);\n    const contentRef = useRef<HTMLDivElement | null>(null);\n\n    const toggleOpen = useCallback(() => setIsOpen((v) => !v), []);\n\n    const getContentHeight = () => {\n      return contentRef?.current?.offsetHeight;\n    };\n\n    useEffect(() => {\n      setContentHeight(isOpen ? getContentHeight() : 0);\n      onChange(isOpen);\n    }, [isOpen, onChange]);\n\n    const value = useMemo(\n      () => ({\n        contentHeight,\n        contentRef,\n        isOpen,\n        toggleOpen,\n      }),\n      [contentHeight, isOpen, toggleOpen],\n    );\n\n    return (\n      <Box\n        ref={ref}\n        {...rest}\n        __css={{\n          ...(!isOpen ? { overflow: 'hidden' } : {}),\n          bg: 'white',\n          borderRadius: 'lg',\n          userSelect: 'none',\n        }}\n      >\n        <AccordionContext.Provider value={value}>\n          {children}\n        </AccordionContext.Provider>\n      </Box>\n    );\n  },\n);\n\nconst Accordion = Object.assign(AccordionComponent, {\n  Header: AccordionHeader,\n  Content: AccordionContent,\n});\n\nexport default Accordion;\n"]}