{"version":3,"sources":["../src/components/Badge/Badge.tsx"],"names":["React","useEffect","useMemo","useState","forwardRef","tinycolor","VARIANTS","Badge","alpha","children","color","text","variant","props","ref","bg","setBg","theme","useTheme_default","themeColor","getPropName","prop","root","rs","propName","hexColor","newTinyColor","Box_default","Text_default","Badge_default"],"mappings":"wHAAA,OAAOA,GAAS,aAAAC,EAAW,WAAAC,EAAS,YAAAC,EAAU,cAAAC,MAAkB,QAChE,OAAOC,MAAe,aAatB,IAAMC,EAAW,CACf,QAAS,UACT,QAAS,iBACT,MAAO,UACP,KAAM,UACN,QAAS,UACT,QAAS,SACX,EAEMC,EAAQH,EACZ,CACE,CACE,MAAAI,EAAQ,IACR,SAAAC,EACA,MAAAC,EACA,KAAAC,EACA,QAAAC,EAAU,aACPC,CACL,EACAC,IACG,CACH,GAAM,CAACC,EAAIC,CAAK,EAAIb,EAAS,EAAE,EACzB,CAAE,MAAAc,CAAM,EAAIC,EAAS,EAErBC,EAAajB,EAAQ,IACrBQ,EACKO,EAAM,OAAOP,IAAUA,EAEvBJ,EAASM,GAEjB,CAACF,EAAOE,EAASK,EAAM,MAAM,CAAC,EAE3BG,EAAeC,GACZA,EAAK,QAAQ,OAAQ,EAAE,EAAE,QAAQ,IAAK,EAAE,EAGjD,OAAApB,EAAU,IAAM,CACd,IAAMqB,EAAO,SAAS,cAAc,OAAO,EACrCC,EAAK,iBAAiBD,CAAI,EAC1BE,EAAWJ,EAAYD,CAAU,EAEjCM,EAAWN,EAAW,WAAW,KAAK,EACxCI,EAAG,iBAAiBC,CAAQ,EAC5BL,EAEEO,EAAerB,EAAUoB,CAAQ,EACvCC,EAAa,SAASlB,CAAK,EAC3BQ,EAAMU,EAAa,YAAY,CAAC,CAClC,EAAG,CAAClB,EAAOE,EAAOS,CAAU,CAAC,EAG3BnB,EAAA,cAAC2B,EAAA,CACC,IAAKb,EACJ,GAAGD,EACJ,MAAO,CACL,GAAAE,EACA,aAAc,OACd,QAAS,eACT,GAAI,EACJ,GAAI,CACN,GAECN,GACCT,EAAA,cAAC4B,EAAA,CAAK,SAAS,KAAK,MAAOT,GACxBR,CACH,CAEJ,CAEJ,CACF,EAEOkB,EAAQtB","sourcesContent":["import React, { useEffect, useMemo, useState, forwardRef } from 'react';\nimport tinycolor from 'tinycolor2';\nimport { Box, BoxProps } from 'src/components/Box';\nimport { Text } from 'src/components/Text';\nimport useTheme from 'src/hooks/useTheme';\nimport { IThemeFoundationColors } from 'src/theme/theme';\n\ninterface BadgeProps extends Omit<BoxProps, 'color'> {\n  alpha?: number;\n  color?: keyof IThemeFoundationColors;\n  text?: string;\n  variant?: 'default' | 'primary' | 'error' | 'info' | 'success' | 'warning';\n}\n\nconst VARIANTS = {\n  default: '#0988FD',\n  primary: 'var(--primary)',\n  error: '#E47A7A',\n  info: '#07AFC6',\n  success: '#4BC3BC',\n  warning: '#E1A300',\n};\n\nconst Badge = forwardRef(\n  (\n    {\n      alpha = 0.25,\n      children,\n      color,\n      text,\n      variant = 'success',\n      ...props\n    }: BadgeProps,\n    ref,\n  ) => {\n    const [bg, setBg] = useState('');\n    const { theme } = useTheme();\n\n    const themeColor = useMemo(() => {\n      if (color) {\n        return theme.colors[color] || color;\n      } else {\n        return VARIANTS[variant];\n      }\n    }, [color, variant, theme.colors]);\n\n    const getPropName = (prop) => {\n      return prop.replace('var(', '').replace(')', '');\n    };\n\n    useEffect(() => {\n      const root = document.querySelector(':root');\n      const rs = getComputedStyle(root);\n      const propName = getPropName(themeColor);\n\n      const hexColor = themeColor.startsWith('var')\n        ? rs.getPropertyValue(propName)\n        : themeColor;\n\n      const newTinyColor = tinycolor(hexColor);\n      newTinyColor.setAlpha(alpha);\n      setBg(newTinyColor.toRgbString());\n    }, [alpha, color, themeColor]);\n\n    return (\n      <Box\n        ref={ref}\n        {...props}\n        __css={{\n          bg,\n          borderRadius: 'full',\n          display: 'inline-block',\n          px: 2,\n          py: 1,\n        }}\n      >\n        {children || (\n          <Text fontSize=\"xs\" color={themeColor}>\n            {text}\n          </Text>\n        )}\n      </Box>\n    );\n  },\n);\n\nexport default Badge;\n"]}