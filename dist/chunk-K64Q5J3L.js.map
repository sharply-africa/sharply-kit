{"version":3,"sources":["../src/context/ThemeContext.tsx"],"names":["React","Slide","ToastContainer","EmotionThemeProvider","merge","ThemeContext","ThemeProvider","props","children","googleMapsKey","resetCSS","theme","theme_default","customTheme","setCustomTheme","updateTheme","newTheme","v","value","CSSReset_default","ToastReset_default","ThemeContext_default"],"mappings":"wHAAA,UAAYA,MAAW,QACvB,OAAS,SAAAC,EAAO,kBAAAC,MAAsB,iBACtC,OAAS,iBAAiBC,MAA4B,iBACtD,OAAOC,MAAW,eAkBX,IAAMC,EAAqB,gBAAc,CAAC,CAAsB,EAEjEC,EAAiBC,GAA2C,CAChE,GAAM,CACJ,SAAAC,EACA,cAAAC,EACA,SAAAC,EAAW,GACX,MAAAC,EAAQC,CACV,EAAIL,EACE,CAACM,EAAaC,CAAc,EAAU,WAAS,CAAE,GAAGH,CAAM,CAAC,EAE3DI,EAAoB,cACxB,CAACC,EAAW,CAAC,IAAMF,EAAgBG,GAAMb,EAAMa,EAAGD,CAAQ,CAAC,EAC3D,CAAC,CACH,EAEME,EAAc,UAClB,KAAO,CACL,cAAAT,EACA,MAAOI,EACP,YAAAE,CACF,GACA,CAACF,EAAaE,EAAaN,CAAa,CAC1C,EAEA,OACE,gBAACJ,EAAa,SAAb,CAAsB,MAAOa,GAC5B,gBAACf,EAAA,CAAqB,MAAOU,GAC1BH,GAAY,gBAACS,EAAA,IAAS,EACtBX,EACD,gBAACN,EAAA,CACC,UAAW,IACX,aAAY,GACZ,UAAS,GACT,gBAAe,GACf,YAAW,GACX,iBAAgB,GAChB,aAAY,GACZ,SAAS,gBACT,IAAK,GACL,WAAYD,EACd,EACA,gBAACmB,EAAA,IAAW,CACd,CACF,CAEJ,EAEOC,EAAQf","sourcesContent":["import * as React from 'react';\nimport { Slide, ToastContainer } from 'react-toastify';\nimport { ThemeProvider as EmotionThemeProvider } from '@emotion/react';\nimport merge from 'lodash.merge';\nimport CSSReset from 'src/resets/CSSReset';\nimport ToastReset from 'src/resets/ToastReset';\nimport defaultTheme, { ITheme } from 'src/theme';\n\ninterface ThemeProviderProps {\n  children: JSX.Element | JSX.Element[];\n  googleMapsKey: string;\n  resetCSS?: boolean;\n  theme?: ITheme;\n}\n\nexport interface ThemeContextProps {\n  googleMapsKey: string;\n  theme: ITheme;\n  updateTheme(theme: ITheme): void;\n}\n\nexport const ThemeContext = React.createContext({} as ThemeContextProps);\n\nconst ThemeProvider = (props: ThemeProviderProps): JSX.Element => {\n  const {\n    children,\n    googleMapsKey,\n    resetCSS = true,\n    theme = defaultTheme,\n  } = props;\n  const [customTheme, setCustomTheme] = React.useState({ ...theme });\n\n  const updateTheme = React.useCallback(\n    (newTheme = {}) => setCustomTheme((v) => merge(v, newTheme)),\n    [],\n  );\n\n  const value = React.useMemo(\n    () => ({\n      googleMapsKey,\n      theme: customTheme,\n      updateTheme,\n    }),\n    [customTheme, updateTheme, googleMapsKey],\n  );\n\n  return (\n    <ThemeContext.Provider value={value}>\n      <EmotionThemeProvider theme={customTheme}>\n        {resetCSS && <CSSReset />}\n        {children}\n        <ToastContainer\n          autoClose={5000}\n          closeOnClick\n          draggable\n          hideProgressBar\n          newestOnTop\n          pauseOnFocusLoss\n          pauseOnHover\n          position=\"bottom-center\"\n          rtl={false}\n          transition={Slide}\n        />\n        <ToastReset />\n      </EmotionThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n"]}