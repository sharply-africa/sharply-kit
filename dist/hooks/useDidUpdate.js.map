{"version":3,"sources":["../../src/hooks/useDidUpdate.ts"],"names":["useEffect","useRef","useDidUpdate","callback","conditions","hasMountedRef"],"mappings":"AAEA,OAAS,aAAAA,EAAW,UAAAC,MAAc,QAalC,SAASC,EAAaC,EAAqBC,EAA0B,CACnE,IAAMC,EAAgBJ,EAAO,EAAK,EAC9B,OAAOG,EAAe,KAAe,CAAC,MAAM,QAAQA,CAAU,EAChEA,EAAa,CAACA,CAAU,EACf,MAAM,QAAQA,CAAU,GAAKA,EAAW,SAAW,GAC5D,QAAQ,KACN,mJACF,EAEFJ,EAAU,IAAM,CACVK,EAAc,QAChBF,EAAS,EAETE,EAAc,QAAU,EAG5B,EAAGD,CAAU,EAEbJ,EAAU,IACD,IAAM,CACXK,EAAc,QAAU,EAC1B,EACC,CAAC,CAAC,CACP","sourcesContent":["// source: https://github.com/imbhargav5/rooks/blob/main/src/hooks/useDidUpdate.ts\n\nimport { useEffect, useRef } from 'react';\n\n/**\n *  useDidUpdate hook\n *\n *  Fires a callback on component update\n *  Can take in a list of conditions to fire callback when one of the\n *  conditions changes\n *\n * @param {Function} callback The callback to be called on update\n * @param {Array} conditions The list of variables which trigger update when they are changed\n * @returns {undefined}\n */\nfunction useDidUpdate(callback: () => any, conditions?: any[]): void {\n  const hasMountedRef = useRef(false);\n  if (typeof conditions !== 'undefined' && !Array.isArray(conditions)) {\n    conditions = [conditions];\n  } else if (Array.isArray(conditions) && conditions.length === 0) {\n    console.warn(\n      'Using [] as the second argument makes useDidUpdate a noop. The second argument should either be `undefined` or an array of length greater than 0.',\n    );\n  }\n  useEffect(() => {\n    if (hasMountedRef.current) {\n      callback();\n    } else {\n      hasMountedRef.current = true;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, conditions);\n\n  useEffect(() => {\n    return () => {\n      hasMountedRef.current = false;\n    };\n  }, []);\n}\n\nexport { useDidUpdate };\n"]}